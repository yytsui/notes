{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u7c21\u4ecb","text":"<p>\u672c\u6587\u4e3b\u8981\u5c55\u793a\u5982\u4f55\u7528AI\u5f9e\u81ea\u7136\u8a9e\u8a00\u6587\u4ef6\u63d0\u53d6\u7d50\u69cb\u5316\u8a0a\u606f\u4e26\u52a0\u4ee5\u6574\u7406\u7f8e\u5316 \u4f7f\u7528\u7684\u7bc4\u4f8b\u6587\u672c\u662f\u51fa\u7248\u65bc1919\u5e74\u7684\u98df\u8b5c\u5408\u8f2f\u300aOriginal Recipes of Good Things to Eat\u300b \u4e26\u5448\u73fe\u6700\u5f8c\u8a0a\u606f\u63d0\u53d6\u548cAI\u6587\u751f\u5716\u7d50\u679c\u7bc4\u4f8b.</p> <p>Source Code</p>"},{"location":"blog01/","title":"\u4f7f\u7528 AI \u6280\u8853\u5f9e PDF \u4e2d\u63d0\u53d6\u7d50\u69cb\u5316\u6578\u64da","text":"<p>\u5728\u73fe\u4ee3\u6578\u64da\u5206\u6790\u8207\u8655\u7406\u4e2d\uff0c\u5f9e\u975e\u7d50\u69cb\u5316\u6578\u64da\u4e2d\u63d0\u53d6\u6709\u50f9\u503c\u7684\u4fe1\u606f\u662f\u4e00\u9805\u6311\u6230\u3002\u5c24\u5176\u662f\u7576\u6578\u64da\u4ee5\u81ea\u7136\u8a9e\u8a00\u6587\u672c\u5b58\u5728\u65bc PDF \u6587\u4ef6\u4e2d\u6642\uff0c\u5982\u4f55\u6709\u6548\u5730\u63d0\u53d6\u4e26\u8f49\u63db\u6210\u7d50\u69cb\u5316\u6578\u64da\uff08\u5982 JSON \u683c\u5f0f\uff09\u4ee5\u4fbf\u65bc\u9032\u4e00\u6b65\u5206\u6790\uff0c\u986f\u5f97\u5c24\u70ba\u91cd\u8981\u3002\u672c\u6587\u5c07\u4ecb\u7d39\u5982\u4f55\u4f7f\u7528 Python \u548c AI \u6280\u8853\u5f9e\u4e00\u672c\u51fa\u7248\u65bc 1919 \u5e74\u7684\u98df\u8b5c\u66f8\u300aOriginal Recipes of Good Things to Eat\u300b\u4e2d\u63d0\u53d6\u98df\u8b5c\u6578\u64da\u3002</p>"},{"location":"blog01/#_1","title":"\u80cc\u666f","text":"<p>\u9019\u672c\u66f8\u4e2d\u5305\u542b\u8a31\u591a\u7528\u81ea\u7136\u8a9e\u8a00\u64b0\u5beb\u7684\u98df\u8b5c\u6bb5\u843d\uff0c\u4f8b\u5982\uff1a</p> <p>Tomato Soup <pre><code>Boil 12 tomatoes until they are soft, run through a sieve and add a teaspoon of soda to a quart of pulp.\nPut a tablespoon of butter in a sauce pan; when it melts add a teaspoon of flour. Add a pint of hot milk, salt,\ncayenne pepper, and cracker crumbs. When it boils, add the tomatoes. Do not let it boil after the tomatoes\nhave been added. Serve at once. Mrs. Wilhelmina Albrecht.\n</code></pre></p> <p>\u6211\u5011\u7684\u4efb\u52d9\u662f\u5f9e\u9019\u4e9b\u81ea\u7136\u8a9e\u8a00\u63cf\u8ff0\u4e2d\u63d0\u53d6\u51fa\u7d50\u69cb\u5316\u6578\u64da\uff0c\u4ee5 JSON \u683c\u5f0f\u8868\u793a\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>{\n  \"title\": \"Tomato Soup\",\n  \"page\": 11,\n  \"author\": \"Mrs. Wilhelmina Albrecht\",\n  \"ingredients\": [\n    { \"item\": \"tomatoes\", \"quantity\": 12.0, \"unit\": null },\n    { \"item\": \"soda\", \"quantity\": 1.0, \"unit\": \"teaspoon\" },\n    { \"item\": \"butter\", \"quantity\": 1.0, \"unit\": \"tablespoon\" },\n    { \"item\": \"flour\", \"quantity\": 1.0, \"unit\": \"teaspoon\" },\n    { \"item\": \"milk\", \"quantity\": 1.0, \"unit\": \"pint\" },\n    { \"item\": \"salt\", \"quantity\": null, \"unit\": null },\n    { \"item\": \"cayenne pepper\", \"quantity\": null, \"unit\": null },\n    { \"item\": \"cracker crumbs\", \"quantity\": null, \"unit\": null }\n  ],\n  \"instructions\": [\n    \"Boil 12 tomatoes until they are soft, run through a sieve and add a teaspoon of soda to a quart of pulp.\",\n    \"Put a tablespoon of butter in a sauce pan; when it melts add a teaspoon of flour.\",\n    \"Add a pint of hot milk, salt, cayenne pepper, and cracker crumbs.\",\n    \"When it boils, add the tomatoes.\",\n    \"Do not let it boil after the tomatoes have been added.\",\n    \"Serve at once.\"\n  ],\n  \"id\": 1\n}\n</code></pre> <p>\u6b64\u5916\uff0c\u66f8\u4e2d\u9084\u5305\u542b\u4e00\u4e9b\u5ee3\u544a\u9801\uff0c\u6211\u5011\u9700\u8981\u5ffd\u7565\u9019\u4e9b\u9801\u9762\uff0c\u50c5\u63d0\u53d6\u98df\u8b5c\u5167\u5bb9\u3002</p>"},{"location":"blog01/#_2","title":"\u4f7f\u7528\u7684\u6280\u8853\u8207\u5de5\u5177","text":"<p>\u6211\u5011\u5c07\u4f7f\u7528\u4ee5\u4e0b\u5de5\u5177\u4f86\u5b8c\u6210\u9019\u500b\u4efb\u52d9\uff1a</p> <ul> <li>Python\uff1a\u4f5c\u70ba\u4e3b\u8981\u958b\u767c\u8a9e\u8a00\u3002</li> <li>PyPDF2\uff1a\u7528\u65bc\u5f9e PDF \u6587\u4ef6\u4e2d\u63d0\u53d6\u6587\u672c\u3002</li> <li>OpenAI API\uff1a\u5229\u7528 AI \u6a21\u578b\u5f9e\u63d0\u53d6\u7684\u6587\u672c\u4e2d\u8b58\u5225\u4e26\u7d50\u69cb\u5316\u98df\u8b5c\u3002</li> <li>Loguru\uff1a\u7528\u65bc\u65e5\u8a8c\u8a18\u9304\uff0c\u65b9\u4fbf\u6211\u5011\u8abf\u8a66\u548c\u76e3\u63a7\u7a0b\u5e8f\u3002</li> <li>dotenv\uff1a\u7528\u65bc\u7ba1\u7406 API \u91d1\u9470\u548c\u5176\u4ed6\u74b0\u5883\u8b8a\u91cf\u3002</li> </ul>"},{"location":"blog01/#_3","title":"\u89e3\u6c7a\u65b9\u6848\u6982\u8ff0","text":"<p>\u6211\u5011\u7684 AI \u89e3\u6c7a\u65b9\u6848\u5305\u542b\u4ee5\u4e0b\u6b65\u9a5f\uff1a</p> <ol> <li>PDF \u6587\u4ef6\u8b80\u53d6\uff1a</li> <li> <p>\u4f7f\u7528 PyPDF2 \u8b80\u53d6 PDF \u6587\u4ef6\u4e26\u63d0\u53d6\u6bcf\u4e00\u9801\u7684\u6587\u672c\u5167\u5bb9\u3002</p> </li> <li> <p>\u69cb\u5efa AI \u63d0\u793a\uff1a</p> </li> <li> <p>\u6839\u64da\u63d0\u53d6\u7684\u6587\u672c\u69cb\u5efa\u63d0\u793a\uff0c\u8981\u6c42 AI \u5f9e\u6587\u672c\u4e2d\u63d0\u53d6\u98df\u8b5c\u6578\u64da\uff08\u5305\u62ec\u6a19\u984c\u3001\u4f5c\u8005\u3001\u98df\u6750\u3001\u6b65\u9a5f\u7b49\uff09\u3002</p> </li> <li> <p>\u8abf\u7528 OpenAI API\uff1a</p> </li> <li> <p>\u5c07\u69cb\u5efa\u7684\u63d0\u793a\u767c\u9001\u7d66 OpenAI API\uff0c\u4e26\u5c07\u8fd4\u56de\u7684\u6578\u64da\u89e3\u6790\u70ba JSON \u683c\u5f0f\u3002</p> </li> <li> <p>\u6578\u64da\u5b58\u5132\uff1a</p> </li> <li>\u5c07\u63d0\u53d6\u7684\u98df\u8b5c\u6578\u64da\u5b58\u5132\u5230 JSON \u6587\u4ef6\u4e2d\uff0c\u4e26\u8a18\u9304\u672a\u63d0\u53d6\u5230\u98df\u8b5c\u7684\u9801\u9762\u3002</li> </ol>"},{"location":"blog01/#_4","title":"\u4e3b\u8981\u4ee3\u78bc\u89e3\u6790","text":"<p>\u4ee5\u4e0b\u662f\u6211\u5011\u7684 Python \u4ee3\u78bc\uff1a</p> <pre><code>import json\nimport os\nfrom string import Template\nfrom typing import Dict\n\nimport PyPDF2\nfrom dotenv import load_dotenv\nfrom loguru import logger\nfrom openai import OpenAI\n\nfrom ai import ask_ai\n\nFILE_PATH = \"data/originalrecipeso00orde.pdf\"\nload_dotenv()\nopenai_client = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\n\nprompt_template = Template(\"\"\"\n    Extract all recipes from the following text starting from ---Page $page_number---. Each recipe should include:\n    - Recipe name\n    - Ingredients (with item, quantity, and unit)\n    - Instructions (use the original text as much as possible)\n    - Author\n    - Page number\n\n    Format each recipe in JSON format like this:\n\n    {{\n        \"recipe\": \"Recipe Name\",\n        \"page\": {page_number},\n        \"author\": \"Author Name\",\n        \"ingredients\": [\n            {{\"item\": \"ingredient 1\", \"quantity\": 2, \"unit\": \"cups\"}},\n            {{\"item\": \"ingredient 2\", \"quantity\": 1, \"unit\": \"tablespoon\"}}\n        ],\n        \"instructions\": [\n            \"Step 1\",\n            \"Step 2\",\n            \"Step 3\"\n        ]\n    }}\n\"\"\")\n\nSYSTEM_CONTENT = \"You are a helpful information extraction assistant.\"\n\ndef read_pdf(pdf_path: str) -&gt; Dict:\n    \"\"\"Extract text from PDF file.\"\"\"\n    page_text = {}\n    with open(pdf_path, 'rb') as file:\n        pdf_reader = PyPDF2.PdfReader(file)\n        for i, page in enumerate(pdf_reader.pages):\n            page_text[i+1] = page.extract_text()\n    return page_text\n\ndef load_openai_json(response):\n    \"\"\"Parse the JSON response from OpenAI API.\"\"\"\n    try:\n        return json.loads(response.split(\"```json\")[1].split(\"```\")[0])\n    except Exception as e:\n        logger.error(f\"Error loading json: {e}\")\n        return None\n\ndef run():\n    content = read_pdf(FILE_PATH)\n    results = []\n    for page_number, text in content.items():\n        prompt = prompt_template.substitute(page_number=page_number, text=text)\n        logger.info(f\"Processing Page {page_number}\")\n        text_response = ask_ai(prompt, system_content=SYSTEM_CONTENT)\n        response = load_openai_json(text_response)\n        if response:\n            results.append(response)\n\n    with open(\"recipes.json\", \"w\") as f:\n        json.dump(results, f, indent=4)\n\nif __name__ == \"__main__\":\n    run()\n</code></pre>"},{"location":"blog01/#_5","title":"\u7d50\u8ad6","text":"<p>\u900f\u904e\u672c\u6848\u4f8b\uff0c\u6211\u5011\u5c55\u793a\u4e86\u5982\u4f55\u7d50\u5408 Python \u548c AI \u6280\u8853\uff0c\u5f9e PDF \u6587\u6a94\u4e2d\u63d0\u53d6\u7d50\u69cb\u5316\u6578\u64da\uff0c\u4e26\u8f49\u5316\u70ba JSON \u683c\u5f0f\u3002\u9019\u4e0d\u50c5\u50c5\u9069\u7528\u65bc\u98df\u8b5c\u63d0\u53d6\uff0c\u9084\u53ef\u4ee5\u61c9\u7528\u65bc\u5176\u4ed6\u985e\u578b\u7684\u6587\u6a94\u6578\u64da\u63d0\u53d6\uff0c\u5982\u5831\u544a\u3001\u624b\u518a\u548c\u5408\u540c\u3002</p> <p>\u6b64\u89e3\u6c7a\u65b9\u6848\u5c55\u793a\u4e86\u5229\u7528 AI \u6280\u8853\u8655\u7406\u975e\u7d50\u69cb\u5316\u6578\u64da\u7684\u6f5b\u529b\uff0c\u70ba\u4f01\u696d\u548c\u7814\u7a76\u6a5f\u69cb\u63d0\u4f9b\u4e86\u4e00\u7a2e\u9ad8\u6548\u7684\u6578\u64da\u8655\u7406\u65b9\u5f0f\u3002\u5e0c\u671b\u672c\u6587\u80fd\u5e6b\u52a9\u60a8\u7406\u89e3 AI \u5728\u81ea\u7136\u8a9e\u8a00\u8655\u7406\u548c\u6578\u64da\u63d0\u53d6\u65b9\u9762\u7684\u61c9\u7528\u3002</p>"},{"location":"blog02/","title":"\u4f7f\u7528 OpenAI \u7684 JSON Schema \u9032\u884c\u7d50\u69cb\u5316\u6578\u64da\u63d0\u53d6\uff1a\u5347\u7d1a\u7248 AI \u9a45\u52d5\u89e3\u6c7a\u65b9\u6848","text":"<p>\u5728\u524d\u4e00\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u5011\u4ecb\u7d39\u4e86\u5982\u4f55\u5229\u7528 OpenAI API \u5f9e PDF \u6587\u4ef6\u4e2d\u63d0\u53d6\u7d50\u69cb\u5316\u7684\u98df\u8b5c\u6578\u64da\u3002\u5728\u672c\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u5011\u5c07\u9032\u4e00\u6b65\u6df1\u5165\u63a2\u8a0e\u5982\u4f55\u4f7f\u7528 OpenAI \u7684 JSON Schema \u6280\u8853\uff0c\u4ee5\u66f4\u7cbe\u78ba\u548c\u7d50\u69cb\u5316\u7684\u65b9\u5f0f\u63d0\u53d6\u6578\u64da\u3002\u9019\u6b21\u7684\u6539\u9032\u5c07\u7d50\u5408 Python \u7684 <code>pydantic</code> \u6578\u64da\u6a21\u578b\uff0c\u4e26\u4f7f\u7528 OpenAI \u7684 <code>response_format</code> \u529f\u80fd\u4f86\u78ba\u4fdd\u8fd4\u56de\u7684\u6578\u64da\u7b26\u5408\u6211\u5011\u9810\u671f\u7684\u7d50\u69cb\u3002</p>"},{"location":"blog02/#json-schema","title":"\u4f7f\u7528 JSON Schema \u7684\u512a\u52e2","text":"<p>\u900f\u904e OpenAI \u7684 JSON Schema \u529f\u80fd\uff0c\u6211\u5011\u53ef\u4ee5\u78ba\u4fdd AI \u6a21\u578b\u751f\u6210\u7684\u8f38\u51fa\u5b8c\u5168\u7b26\u5408\u9810\u671f\u7684\u6578\u64da\u683c\u5f0f\uff0c\u5f9e\u800c\u5927\u5e45\u964d\u4f4e\u6578\u64da\u6e05\u7406\u548c\u5f8c\u671f\u8655\u7406\u7684\u5de5\u4f5c\u91cf\u3002\u5728\u81ea\u7136\u8a9e\u8a00\u6587\u672c\u8655\u7406\u4efb\u52d9\u4e2d\uff0c\u4f7f\u7528\u9810\u5b9a\u7fa9\u7684 Schema \u53ef\u4ee5\u907f\u514d\u683c\u5f0f\u932f\u8aa4\uff0c\u78ba\u4fdd\u6578\u64da\u7684\u4e00\u81f4\u6027\u548c\u6e96\u78ba\u6027\u3002</p>"},{"location":"blog02/#_1","title":"\u9810\u671f\u8f38\u51fa\u683c\u5f0f","text":"<p>\u6211\u5011\u5e0c\u671b\u5f9e PDF \u6587\u4ef6\u4e2d\u63d0\u53d6\u7684\u6578\u64da\u7d50\u69cb\u5982\u4e0b\uff1a</p> <pre><code>{\n  \"id\": 1,\n  \"title\": \"Tomato Soup\",\n  \"page\": 11,\n  \"author\": \"Mrs. Wilhelmina Albrecht\",\n  \"ingredients\": [\n    { \"item\": \"tomatoes\", \"quantity\": 12, \"unit\": null },\n    { \"item\": \"soda\", \"quantity\": 1, \"unit\": \"teaspoon\" },\n    { \"item\": \"butter\", \"quantity\": 1, \"unit\": \"tablespoon\" },\n    { \"item\": \"flour\", \"quantity\": 1, \"unit\": \"teaspoon\" }\n  ],\n  \"instructions\": [\n    \"Boil 12 tomatoes until they are soft.\",\n    \"Add a teaspoon of soda to a quart of pulp.\",\n    \"Put a tablespoon of butter in a sauce pan and add a teaspoon of flour.\",\n    \"Add hot milk, salt, cayenne pepper, and cracker crumbs.\",\n    \"Serve at once.\"\n  ]\n}\n</code></pre>"},{"location":"blog02/#python","title":"Python \u4ee3\u78bc\u89e3\u6790","text":""},{"location":"blog02/#1","title":"1. \u6578\u64da\u6a21\u578b\u5b9a\u7fa9","text":"<p>\u9996\u5148\uff0c\u6211\u5011\u4f7f\u7528 <code>pydantic</code> \u4f86\u5b9a\u7fa9\u6211\u5011\u7684\u6578\u64da\u7d50\u69cb\uff1a</p> <pre><code>from typing import List, Optional, Union\nfrom pydantic import BaseModel\n\nclass Ingredient(BaseModel):\n    item: Optional[str] = None\n    quantity: Optional[Union[float, str]] = None\n    unit: Optional[str] = None\n\nclass Recipe(BaseModel):\n    id: int\n    title: Optional[str] = None\n    page: Optional[int] = None\n    author: Optional[str] = None\n    ingredients: Optional[List[Ingredient]] = None\n    instructions: Optional[List[str]] = None\n</code></pre> <p>\u9019\u4e9b\u6a21\u578b\u5e6b\u52a9\u6211\u5011\u78ba\u4fdd\u6240\u6709\u63d0\u53d6\u5230\u7684\u6578\u64da\u7b26\u5408\u5b9a\u7fa9\u7684\u683c\u5f0f\uff0c\u907f\u514d\u56e0\u8f38\u51fa\u4e0d\u4e00\u81f4\u800c\u5c0e\u81f4\u7684\u554f\u984c\u3002</p>"},{"location":"blog02/#2-openai-api","title":"2. \u4f7f\u7528 OpenAI API \u9032\u884c\u6578\u64da\u63d0\u53d6","text":"<p>\u6211\u5011\u5229\u7528 OpenAI \u7684 <code>response_format</code> \u529f\u80fd\u4f86\u78ba\u4fdd\u8fd4\u56de\u7684\u6578\u64da\u7b26\u5408\u6211\u5011\u7684 JSON Schema\uff1a</p> <pre><code>def find_structured_info_with_ai(prompt, system_content, response_format):\n    completion = openai_client.beta.chat.completions.parse(\n        model=\"gpt-4o-2024-08-06\",\n        messages=[\n            {\"role\": \"system\", \"content\": system_content},\n            {\"role\": \"user\", \"content\": prompt}\n        ],\n        response_format=response_format,\n    )\n    message = completion.choices[0].message\n    if message.parsed:\n        return message.parsed\n    else:\n        return message.refusal\n</code></pre>"},{"location":"blog02/#3","title":"3. \u67e5\u8a62\u63d0\u793a\u751f\u6210","text":"<p>\u6211\u5011\u70ba\u6bcf\u4e00\u9801\u751f\u6210\u63d0\u793a\uff0c\u4ee5\u5e6b\u52a9 AI \u5f9e\u6587\u672c\u4e2d\u6e96\u78ba\u8b58\u5225\u98df\u8b5c\u5167\u5bb9\uff1a</p> <pre><code>def generate_prompt(page_number, text):\n    return (f\"Extract all recipes from the following text starting from ---Page {page_number}--- \"\n            f\"Each recipe should include: - title - Ingredients (with item, quantity, and unit) - \"\n            f\"Instructions (use the original text as much as possible) - Author - Page number\\n\"\n            f\"There could be multiple recipes in a page. \"\n            f\"---Page {page_number}---\\n{text}\")\n</code></pre>"},{"location":"blog02/#4","title":"4. \u4e3b\u7a0b\u5e8f\u904b\u884c\u908f\u8f2f","text":"<p>\u4ee5\u4e0b\u662f\u4e3b\u7a0b\u5e8f\uff0c\u5f9e PDF \u6587\u4ef6\u4e2d\u63d0\u53d6\u6587\u672c\uff0c\u4e26\u4f7f\u7528 AI \u9032\u884c\u7d50\u69cb\u5316\u6578\u64da\u63d0\u53d6\uff1a</p> <pre><code>def main():\n    content = read_pdf(FILE_PATH)\n    recipes = []\n    no_recipes_warnings = []\n\n    for page_number, text in content.items():\n        prompt = generate_prompt(page_number, text)\n        response = find_structured_info_with_ai(prompt, SYSTEM_CONTENT, CookBook)\n\n        if isinstance(response, CookBook) and response.recipes:\n            recipes.extend(response.recipes)\n            logger.info(f\"Found {len(response.recipes)} recipes on page {page_number}\")\n        else:\n            no_recipes_warnings.append({\"page_number\": page_number, \"warning\": response})\n\n    # \u4fdd\u5b58\u63d0\u53d6\u7684\u98df\u8b5c\u6578\u64da\n    recipes_dict = [recipe.model_dump() for recipe in recipes]\n    dump_json(recipes_dict, STRUCTURED_RECIPES_FILEPATH)\n    dump_json(no_recipes_warnings, STRUCTURED_NO_RECIPES_WARNINGS_FILEPATH)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"blog02/#python_1","title":"\u5b8c\u6574\u7684 Python \u4ee3\u78bc","text":"<p>\u4ee5\u4e0b\u662f\u5b8c\u6574\u7684\u4ee3\u78bc\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u8907\u88fd\u4e26\u904b\u884c\uff1a</p> <pre><code>import os\nfrom dotenv import load_dotenv\nfrom icecream import ic\nfrom loguru import logger\nfrom openai import OpenAI\nfrom pdf_text import read_pdf\nfrom settings import FILE_PATH, SYSTEM_CONTENT, STRUCTURED_RECIPES_FILEPATH, STRUCTURED_NO_RECIPES_WARNINGS_FILEPATH\nfrom utils import dump_json\nfrom typing import List, Optional, Union\nfrom pydantic import BaseModel\n\nclass Ingredient(BaseModel):\n    item: Optional[str] = None\n    quantity: Optional[Union[float, str]] = None\n    unit: Optional[str] = None\n\nclass Recipe(BaseModel):\n    id: int\n    title: Optional[str] = None\n    page: Optional[int] = None\n    author: Optional[str] = None\n    ingredients: Optional[List[Ingredient]] = None\n    instructions: Optional[List[str]] = None\n\nclass CookBook(BaseModel):\n    recipes: List[Recipe]\n\nload_dotenv()\nopenai_client = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\n\ndef main():\n    content = read_pdf(FILE_PATH)\n    recipes = []\n\n    for page_number, text in content.items():\n        prompt = generate_prompt(page_number, text)\n        response = find_structured_info_with_ai(prompt, SYSTEM_CONTENT, CookBook)\n        if isinstance(response, CookBook) and response.recipes:\n            recipes.extend(response.recipes)\n\n    recipes_dict = [recipe.model_dump() for recipe in recipes]\n    dump_json(recipes_dict, STRUCTURED_RECIPES_FILEPATH)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"blog02/#_2","title":"\u7d50\u8ad6","text":"<p>\u900f\u904e\u672c\u6b21\u5347\u7d1a\uff0c\u6211\u5011\u5c55\u793a\u4e86\u5982\u4f55\u7d50\u5408 OpenAI \u7684 JSON Schema \u548c Python \u7684 <code>pydantic</code> \u5eab\uff0c\u4ee5\u66f4\u7cbe\u78ba\u7684\u65b9\u5f0f\u5f9e PDF \u4e2d\u63d0\u53d6\u7d50\u69cb\u5316\u6578\u64da\u3002\u9019\u4e0d\u50c5\u63d0\u9ad8\u4e86\u6578\u64da\u63d0\u53d6\u7684\u6e96\u78ba\u6027\uff0c\u9084\u6e1b\u5c11\u4e86\u5f8c\u671f\u6578\u64da\u6e05\u7406\u7684\u5de5\u4f5c\u91cf\u3002</p> <p>\u672a\u4f86\uff0c\u6211\u5011\u53ef\u4ee5\u5c07\u9019\u7a2e\u65b9\u6cd5\u61c9\u7528\u65bc\u5176\u4ed6\u985e\u578b\u7684\u6587\u6a94\u6578\u64da\u63d0\u53d6\uff0c\u5982\u5408\u540c\u3001\u6280\u8853\u624b\u518a\u548c\u5831\u544a\u7b49\uff0c\u70ba\u4f01\u696d\u548c\u6578\u64da\u79d1\u5b78\u5bb6\u63d0\u4f9b\u66f4\u9ad8\u6548\u7684\u6578\u64da\u8655\u7406\u5de5\u5177\u3002</p> <p>\u5e0c\u671b\u672c\u6587\u80fd\u5e6b\u52a9\u60a8\u66f4\u597d\u5730\u7406\u89e3 OpenAI \u7684 JSON Schema \u529f\u80fd\u53ca\u5176\u61c9\u7528\u5834\u666f\u3002</p>"},{"location":"blog03/","title":"\u4f7f\u7528 AI \u751f\u6210\u98df\u8b5c\u4e3b\u5716\u8207\u6b65\u9a5f\u5716\u7247\uff1a\u63d0\u5347\u98df\u8b5c\u5448\u73fe\u7684\u8996\u89ba\u6548\u679c","text":"<p>\u5728\u524d\u5e7e\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u5011\u4ecb\u7d39\u4e86\u5982\u4f55\u4f7f\u7528 AI \u5f9e PDF \u4e2d\u63d0\u53d6\u7d50\u69cb\u5316\u6578\u64da\uff0c\u4e26\u5c07\u98df\u8b5c\u8f49\u63db\u70ba JSON \u683c\u5f0f\u3002\u7136\u800c\uff0c\u50c5\u50c5\u6709\u7d50\u69cb\u5316\u7684\u6578\u64da\u9084\u4e0d\u5920\uff0c\u5982\u679c\u80fd\u70ba\u98df\u8b5c\u751f\u6210\u7cbe\u7f8e\u7684\u5716\u7247\uff0c\u5c07\u4f7f\u5176\u66f4\u5177\u5438\u5f15\u529b\u548c\u5be6\u7528\u6027\u3002\u672c\u6587\u5c07\u4ecb\u7d39\u5982\u4f55\u4f7f\u7528 OpenAI \u7684 DALL-E 3 \u6a21\u578b\u4f86\u751f\u6210\u98df\u8b5c\u4e3b\u5716\u548c\u5206\u6b65\u9a5f\u5716\u7247\uff0c\u4ee5\u63d0\u5347\u98df\u8b5c\u7684\u8996\u89ba\u6548\u679c\u3002</p>"},{"location":"blog03/#_1","title":"\u70ba\u4ec0\u9ebc\u8981\u751f\u6210\u98df\u8b5c\u5716\u7247\uff1f","text":"<p>\u5728\u98df\u8b5c\u5c55\u793a\u4e2d\uff0c\u5716\u7247\u662f\u5438\u5f15\u8b80\u8005\u7684\u95dc\u9375\u3002\u7814\u7a76\u8868\u660e\uff0c\u5177\u6709\u7cbe\u7f8e\u5716\u7247\u7684\u98df\u8b5c\u66f4\u80fd\u5f15\u8d77\u8b80\u8005\u7684\u8208\u8da3\uff0c\u4e26\u63d0\u9ad8\u5617\u8a66\u88fd\u4f5c\u7684\u610f\u9858\u3002\u50b3\u7d71\u4e0a\uff0c\u70ba\u6bcf\u9053\u83dc\u62cd\u651d\u5c08\u696d\u7167\u7247\u9700\u8981\u6642\u9593\u548c\u8cbb\u7528\uff0c\u800c AI \u751f\u6210\u7684\u5716\u7247\u63d0\u4f9b\u4e86\u4e00\u7a2e\u9ad8\u6548\u4e14\u7d93\u6fdf\u7684\u66ff\u4ee3\u65b9\u6848\u3002</p>"},{"location":"blog03/#_2","title":"\u672c\u6587\u5c07\u6db5\u84cb\u4ee5\u4e0b\u5167\u5bb9","text":"<ol> <li>\u5982\u4f55\u751f\u6210\u98df\u8b5c\u4e3b\u5716\uff1a\u6839\u64da\u98df\u8b5c\u7684\u6a19\u984c\u548c\u98df\u6750\u751f\u6210\u4e3b\u5716\u3002</li> <li>\u5982\u4f55\u751f\u6210\u6b65\u9a5f\u5716\u7247\uff1a\u70ba\u6bcf\u4e00\u6b65\u9a5f\u751f\u6210\u5c0d\u61c9\u7684\u5716\u7247\uff0c\u5e6b\u52a9\u8b80\u8005\u66f4\u597d\u5730\u7406\u89e3\u88fd\u4f5c\u6d41\u7a0b\u3002</li> <li>\u5982\u4f55\u5c07\u751f\u6210\u7684\u5716\u7247\u5b58\u5132\u5230\u672c\u5730\uff1a\u5c07\u751f\u6210\u7684\u5716\u7247\u4e0b\u8f09\u4e26\u4fdd\u5b58\u5230\u672c\u5730\uff0c\u4ee5\u4fbf\u65bc\u7db2\u7ad9\u6216\u61c9\u7528\u7a0b\u5e8f\u5c55\u793a\u3002</li> </ol>"},{"location":"blog03/#openai-api","title":"\u4f7f\u7528 OpenAI API \u751f\u6210\u5716\u7247","text":""},{"location":"blog03/#python","title":"Python \u7a0b\u5f0f\u78bc\u6982\u8ff0","text":"<p>\u4ee5\u4e0b\u7a0b\u5f0f\u78bc\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 OpenAI \u7684 DALL-E 3 \u6a21\u578b\u4f86\u751f\u6210\u98df\u8b5c\u4e3b\u5716\u548c\u6b65\u9a5f\u5716\u7247\u3002</p>"},{"location":"blog03/#1-openai","title":"1. \u521d\u59cb\u5316 OpenAI \u5ba2\u6236\u7aef","text":"<p>\u9996\u5148\uff0c\u6211\u5011\u9700\u8981\u5f9e\u74b0\u5883\u8b8a\u91cf\u4e2d\u8b80\u53d6 OpenAI \u7684 API \u5bc6\u9470\u4e26\u521d\u59cb\u5316\u5ba2\u6236\u7aef\uff1a</p> <pre><code>from openai import OpenAI\nfrom dotenv import load_dotenv\nimport os\nfrom loguru import logger\nimport urllib.request\nfrom pathlib import Path\n\nload_dotenv()\nclient = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\n</code></pre>"},{"location":"blog03/#2","title":"2. \u5b9a\u7fa9\u5716\u7247\u751f\u6210\u51fd\u6578","text":"<p>\u6211\u5011\u4f7f\u7528 <code>generate_image</code> \u51fd\u6578\u4f86\u751f\u6210\u5716\u7247\u3002\u8a72\u51fd\u6578\u63a5\u53d7\u4e00\u500b\u63cf\u8ff0\u6027\u6587\u5b57\uff08prompt\uff09\uff0c\u4e26\u8abf\u7528 OpenAI \u7684 DALL-E 3 \u6a21\u578b\u4f86\u751f\u6210\u5716\u7247\uff1a</p> <pre><code>def generate_image(prompt):\n    logger.info(f\"Generating image with prompt: {prompt}\")\n    response = client.images.generate(\n        model=\"dall-e-3\",\n        prompt=prompt,\n        size=\"1024x1024\",\n        quality=\"standard\",\n        n=1,\n    )\n    image_url = response.data[0].url\n    return image_url\n</code></pre>"},{"location":"blog03/#3","title":"3. \u751f\u6210\u98df\u8b5c\u4e3b\u5716","text":"<p>\u4f7f\u7528\u98df\u8b5c\u7684\u6a19\u984c\u548c\u98df\u6750\u5217\u8868\u4f86\u751f\u6210\u4e00\u5f35\u4e3b\u5716\uff0c\u4ee5\u5c55\u793a\u5b8c\u6210\u7684\u6599\u7406\u6210\u54c1\uff1a</p> <pre><code>def generate_main_image_from_recipe(recipe):\n    prompt = f\"A {recipe.title} which was made from ingredients: {recipe.ingredient_items_text}.\"\n    image_url = generate_image(prompt)\n    return image_url\n</code></pre>"},{"location":"blog03/#4","title":"4. \u70ba\u6bcf\u500b\u6b65\u9a5f\u751f\u6210\u5716\u7247","text":"<p>\u91dd\u5c0d\u98df\u8b5c\u4e2d\u7684\u6bcf\u4e00\u500b\u6b65\u9a5f\u751f\u6210\u5c0d\u61c9\u7684\u5716\u7247\uff0c\u5e6b\u52a9\u8b80\u8005\u66f4\u76f4\u89c0\u5730\u7406\u89e3\u88fd\u4f5c\u904e\u7a0b\uff1a</p> <pre><code>def generate_image_from_step(step):\n    image_url = generate_image(step)\n    return image_url\n</code></pre>"},{"location":"blog03/#5","title":"5. \u4e0b\u8f09\u4e26\u5b58\u5132\u5716\u7247","text":"<p>\u70ba\u4e86\u65b9\u4fbf\u5c55\u793a\u548c\u5b58\u6a94\uff0c\u6211\u5011\u9700\u8981\u5c07\u751f\u6210\u7684\u5716\u7247\u4e0b\u8f09\u4e26\u4fdd\u5b58\u5230\u672c\u5730\uff1a</p> <pre><code>def persist_image(image_url, filepath):\n    logger.info(f\"Downloading image from {image_url} to {filepath}\")\n    Path(filepath).parent.mkdir(parents=True, exist_ok=True)\n    urllib.request.urlretrieve(image_url, filepath)\n</code></pre>"},{"location":"blog03/#_3","title":"\u7d9c\u5408\u61c9\u7528\uff1a\u70ba\u98df\u8b5c\u751f\u6210\u4e3b\u5716\u8207\u6b65\u9a5f\u5716\u7247","text":"<p>\u6211\u5011\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u51fd\u6578\u81ea\u52d5\u751f\u6210\u98df\u8b5c\u7684\u4e3b\u5716\u548c\u6b65\u9a5f\u5716\u7247\uff0c\u4e26\u4fdd\u5b58\u5230\u6307\u5b9a\u76ee\u9304\uff1a</p> <pre><code>def generate_recipe_images_and_persist(recipe):\n    logger.info(f\"Generating images for recipe: {recipe.title} (ID: {recipe.id})\")\n\n    # \u751f\u6210\u4e3b\u5716\n    main_image_url = generate_main_image_from_recipe(recipe)\n    main_image_filepath = os.path.join(IMAGE_STORAGE_PATH, recipe.main_image_filename)\n    persist_image(main_image_url, main_image_filepath)\n\n    # \u751f\u6210\u6b65\u9a5f\u5716\u7247\n    for i, step in enumerate(recipe.instructions):\n        step_image_url = generate_image_from_step(step)\n        step_image_filepath = os.path.join(IMAGE_STORAGE_PATH, recipe.get_step_image_filename(i))\n        persist_image(step_image_url, step_image_filepath)\n</code></pre>"},{"location":"blog03/#_4","title":"\u4e3b\u7a0b\u5e8f\u57f7\u884c\u6d41\u7a0b","text":"<p>\u6700\u5f8c\uff0c\u6211\u5011\u6574\u5408\u4ee5\u4e0a\u529f\u80fd\uff0c\u6279\u91cf\u751f\u6210\u98df\u8b5c\u5716\u7247\uff1a</p> <pre><code>def main():\n    from load_recipes import fetch_recipe_samples\n    recipes = fetch_recipe_samples(5)\n    for recipe in recipes:\n        generate_recipe_images_and_persist(recipe)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"blog03/#_5","title":"\u8aaa\u660e","text":"<ol> <li><code>fetch_recipe_samples</code>\uff1a\u7528\u65bc\u52a0\u8f09\u793a\u4f8b\u98df\u8b5c\u6578\u64da\u3002</li> <li><code>generate_recipe_images_and_persist</code>\uff1a\u70ba\u6bcf\u9053\u98df\u8b5c\u751f\u6210\u4e3b\u5716\u548c\u6b65\u9a5f\u5716\u7247\u4e26\u4fdd\u5b58\u3002</li> </ol>"},{"location":"blog03/#_6","title":"\u7d50\u8ad6","text":"<p>\u900f\u904e\u4f7f\u7528 OpenAI \u7684 DALL-E 3 \u6a21\u578b\uff0c\u6211\u5011\u53ef\u4ee5\u81ea\u52d5\u70ba\u98df\u8b5c\u751f\u6210\u9ad8\u8cea\u91cf\u7684\u5716\u7247\uff0c\u7121\u8ad6\u662f\u6210\u54c1\u5c55\u793a\u9084\u662f\u6b65\u9a5f\u8aaa\u660e\u3002\u9019\u4e0d\u50c5\u7bc0\u7701\u4e86\u4eba\u5de5\u62cd\u651d\u7684\u6642\u9593\u548c\u6210\u672c\uff0c\u9084\u80fd\u63d0\u5347\u98df\u8b5c\u7684\u53ef\u8b80\u6027\u548c\u5438\u5f15\u529b\u3002</p> <p>\u9019\u7a2e\u6280\u8853\u4e0d\u50c5\u9650\u65bc\u98df\u8b5c\u61c9\u7528\uff0c\u9084\u53ef\u4ee5\u5ee3\u6cdb\u61c9\u7528\u65bc\u7522\u54c1\u5c55\u793a\u3001\u6559\u5b78\u6750\u6599\u7b49\u591a\u7a2e\u5834\u666f\u3002\u672a\u4f86\uff0c\u6211\u5011\u53ef\u4ee5\u9032\u4e00\u6b65\u512a\u5316\u751f\u6210\u7684\u5716\u7247\u8cea\u91cf\uff0c\u4e26\u63a2\u7d22\u66f4\u591a\u7684 AI \u9a45\u52d5\u61c9\u7528\u5834\u666f\u3002</p> <p>\u5e0c\u671b\u9019\u7bc7\u6587\u7ae0\u80fd\u5e6b\u52a9\u60a8\u7406\u89e3\u5982\u4f55\u4f7f\u7528 AI \u6280\u8853\u4f86\u63d0\u5347\u98df\u8b5c\u548c\u5176\u4ed6\u5167\u5bb9\u7684\u8996\u89ba\u5448\u73fe\u6548\u679c\uff01</p>"},{"location":"conclusion/","title":"\u7d50\u8ad6","text":"<p>\u9019\u4e00\u7cfb\u5217\u7684\u6587\u7ae0\u5c55\u793a\u4e86\u5982\u4f55\u7528AI\u5f9e\u81ea\u7136\u8a9e\u8a00\u4e2d\u81ea\u52d5\u63d0\u53d6\u7d50\u69cb\u5316\u8a0a\u606f, \u4e26\u4e14\u4f7f\u7528OpenAI \u7684 DALL-E 3\u6a21\u578b\u6839\u64da\u63d0\u53d6\u5230\u7684\u6587\u5b57\u4f86\u751f\u6210\u5716\u7247, \u9054\u5230\u4e86\u5c07\u4e00\u6bb5\u6587\u5b57\u8f49\u63db\u6210\u8868\u5217\u52a0\u5716\u6848\u4f7f\u53ef\u8b80\u6027\u5927\u5927\u7684\u589e\u52a0</p> <p>\u4f46\u4ecd\u6709\u4e00\u4e9b\u53ef\u6539\u9032\u4e4b\u8655</p> <ol> <li>\u6b65\u9a5f\u5716\u7684\u98a8\u683c\u4e0d\u4e00\u81f4:\u9019\u53ef\u80fd\u53ef\u4ee5\u85c9\u7531\u540c\u4e00\u4efd\u98df\u8b5c\u751f\u6210\u5716\u7684prompt\u6307\u5b9a\u98a8\u683c\u4f86\u6539\u9032</li> <li>\u6b63\u78ba\u6027\u7684\u9a57\u8b49:\u6587\u5b57\u90e8\u5206\u53ef\u4ee5\u85c9\u7531\u4e0d\u540cLLM (ex. OpenAI vs Claude AI)\u7684\u63d0\u53d6\u7d50\u679c\u4ea4\u53c9\u6bd4\u5c0d\u4f86\u505a\u70ba\u9a57\u8b49</li> <li>\u4e2d\u6587\u5316:\u8cc7\u6599\u7ffb\u8b6f\u90e8\u5206\u5df2\u7528AI\u5b8c\u6210</li> </ol>"},{"location":"gen_recipes_markdown/r117/","title":"Date Salad","text":""},{"location":"gen_recipes_markdown/r117/#ingredients","title":"Ingredients","text":"Ingredient Quantity Unit dates 1.0 package green grapes 1.0 pound apples 3.0 medium sized walnuts 1.0 cup egg 1.0 whole mustard 1.0 teaspoon sugar 1/4 cup salt 1/4 teaspoon butter 1.0 teaspoon vinegar 1/4 cup milk 1/2 cup"},{"location":"gen_recipes_markdown/r117/#instructions","title":"Instructions","text":"<ol> <li> <p>Cut the grapes into halves and remove stones, quarter dates and cut apples into small pieces.</p> <p></p> </li> <li> <p>Add the nuts and mix with following dressing:</p> <p></p> </li> <li> <p>Beat the egg and add the other ingredients.</p> <p></p> </li> <li> <p>Then add 1/4 cup vinegar, and 1/2 cup of milk.</p> <p></p> </li> <li> <p>Cook until thick.</p> <p></p> </li> <li> <p>Arrange salad on lettuce leaves.</p> <p></p> </li> </ol> <p>Recipe by: Rose Zoelck</p> <p>\u2022 Source: Original Recipes of Good Things to Eat page 53</p>"},{"location":"gen_recipes_markdown/r294/","title":"Never Fail Sponge Cake","text":""},{"location":"gen_recipes_markdown/r294/#ingredients","title":"Ingredients","text":"Ingredient Quantity Unit yolks of eggs 4.0 sugar 1.0 cup boiling water 4.0 tablespoons salt 1.0 pinch flour 1.0 cup vanilla 1.0 teaspoon whites of eggs 4.0 cream of tartar 0.25 teaspoon"},{"location":"gen_recipes_markdown/r294/#instructions","title":"Instructions","text":"<ol> <li> <p>Beat yolks of 4 eggs, beaten ten minutes.</p> <p></p> </li> <li> <p>Sift 1 cup of sugar; add gradually to yolks and beat.</p> <p></p> </li> <li> <p>Add 4 tablespoons boiling water, pinch of salt, 1 cup flour sifted five times, and 1 teaspoon vanilla.</p> <p></p> </li> <li> <p>Beat whites of 4 eggs a little, then add 1/4 teaspoon cream of tartar and beat until dry.</p> <p></p> </li> <li> <p>Fold whites in last.</p> <p></p> </li> <li> <p>Bake in a Van Deusen's cake tin fifty or sixty minutes.</p> <p></p> </li> <li> <p>Light oven when ready to place cake in oven and gradually add heat.</p> <p></p> </li> </ol> <p>Recipe by: Mrs. Lillian Schmidt</p> <p>\u2022 Source: Original Recipes of Good Things to Eat page 111</p>"},{"location":"gen_recipes_markdown/r32/","title":"White Fish Croquettes","text":""},{"location":"gen_recipes_markdown/r32/#ingredients","title":"Ingredients","text":"Ingredient Quantity Unit white fish 1.5 pounds butter 0.5 cup flour 1.0 tablespoon milk 1.0 cup grated onion parsley pepper salt eggs 3.0 dry bread crumbs 1.0 loaf"},{"location":"gen_recipes_markdown/r32/#instructions","title":"Instructions","text":"<ol> <li> <p>Boil 1\u00bd pounds of white fish until done. Cool and pick meat off bones.</p> <p></p> </li> <li> <p>Make a sauce of \u00bd cup butter, 1 tablespoon flour, 1 cup milk. Beat until smooth, add a little grated onion, parsley.</p> <p></p> </li> <li> <p>Season with pepper and salt to taste.</p> <p></p> </li> <li> <p>Make day before using. Next morning cut and shape any way you desire.</p> <p></p> </li> <li> <p>Beat 3 eggs.</p> <p></p> </li> <li> <p>About 1 loaf of bread crumbs so dry you can sift them. Dip in eggs, then bread crumbs and let stand for a little while.</p> <p></p> </li> <li> <p>Fry in deep hot fat, in a wire basket.</p> <p></p> </li> </ol> <p>Recipe by: Lily Trodson, Worthy Matron</p> <p>\u2022 Source: Original Recipes of Good Things to Eat page 22</p>"},{"location":"gen_recipes_markdown/r445/","title":"Mint Julup","text":""},{"location":"gen_recipes_markdown/r445/#ingredients","title":"Ingredients","text":"Ingredient Quantity Unit water 1.0 quart sugar 2.0 cups claret wine 1.0 pint strawberry juice 1.0 cup orange juice 1.0 cup boiling water 1.5 cups fresh mint 12.0 sprigs"},{"location":"gen_recipes_markdown/r445/#instructions","title":"Instructions","text":"<ol> <li> <p>Boil water and sugar twenty minutes, add mint and let stand five minutes.</p> <p></p> </li> <li> <p>Strain, add fruit juices and cool.</p> <p></p> </li> <li> <p>Pour into a punch bowl, add claret, and chill with a large piece of ice.</p> <p></p> </li> <li> <p>Dilute with water and garnish with fresh mint leaves and whole strawberries.</p> <p></p> </li> </ol> <p>Recipe by: Mrs. Grace Bradwav</p> <p>\u2022 Source: Original Recipes of Good Things to Eat page 171</p>"},{"location":"gen_recipes_markdown/r61/","title":"Meat Balls With Celery Cream","text":""},{"location":"gen_recipes_markdown/r61/#ingredients","title":"Ingredients","text":"Ingredient Quantity Unit beef 1.0 pound bread 0.25 egg 1.0 milk 1.0 cup butter 1.0 tablespoon flour 2.0 tablespoons sugar 1.0 teaspoon"},{"location":"gen_recipes_markdown/r61/#instructions","title":"Instructions","text":"<ol> <li> <p>Chop the beef fine.</p> <p></p> </li> <li> <p>Soak the bread in water, do not use crust.</p> <p></p> </li> <li> <p>Season with salt, pepper, onion, and nutmeg.</p> <p></p> </li> <li> <p>Beat 1 egg, add a cup of milk gradually and mix well with the above.</p> <p></p> </li> <li> <p>Shape into balls.</p> <p></p> </li> <li> <p>Boil tops of celery stalks about half hour, salt, strain and add meat balls.</p> <p></p> </li> <li> <p>Cook until they come to the top.</p> <p></p> </li> <li> <p>Celery Cream\u2014Cream 1 tablespoon of butter and 2 tablespoons of flour.</p> <p></p> </li> <li> <p>Add liquid from meat and milk to make a gravy.</p> <p></p> </li> <li> <p>Add 1 teaspoon of sugar and pieces of celery cut fine.</p> <p></p> </li> <li> <p>Boil ten minutes, add meat balls and let simmer a few minutes.</p> <p></p> </li> </ol> <p>Recipe by: Mrs. Emma Johnson</p> <p>\u2022 Source: Original Recipes of Good Things to Eat page 35</p>"}]}